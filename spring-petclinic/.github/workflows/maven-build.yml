name: CI/CD with Terraform and Docker

on:
  push:
    branches:
      - main

jobs:
  provision_infrastructure:
    name: Provision Infrastructure with Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Google Cloud credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.0  

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform  

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

  build_and_push_docker:
    name: Build and Push Docker Image
    needs: provision_infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t myapp:latest .

      - name: Tag Docker image
        run: docker tag myapp:latest ${{ secrets.DOCKER_USERNAME }}/spring-boot:latest

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/spring-boot:latest

  deploy_to_vm:
    name: Deploy to VM via SSH
    needs: build_and_push_docker
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} '
          docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:latest
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 80:80 ${{ secrets.DOCKER_USERNAME }}/myapp:latest
          '
